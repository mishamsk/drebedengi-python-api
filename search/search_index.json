{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Drebedengi Python API \u00b6 A rather thin python wrapper for Drebedengi SOAP API. Documentation: https://mishamsk.github.io/drebedengi-python-api GitHub: https://github.com/mishamsk/drebedengi-python-api PyPI: https://pypi.org/project/drebedengi-python-api/ Free software: GPL-3.0-only Features \u00b6 Almost full coverage of \"get\" methods with better English naming for params & types (see drebedengi.api ) Important Retrieving aggregated reports via get_transactions is not currently supported, despite full list of API parameters Typed data model (see drebedengi.model ) Credits \u00b6 Thanks to: drebedengi for a great finance management service zeep for a convenient Python SOAP client lxml for XML library attrs for model classes This package was created with Cookiecutter and the mishamsk/cookiecutter-pypackage project template.","title":"Home"},{"location":"#drebedengi-python-api","text":"A rather thin python wrapper for Drebedengi SOAP API. Documentation: https://mishamsk.github.io/drebedengi-python-api GitHub: https://github.com/mishamsk/drebedengi-python-api PyPI: https://pypi.org/project/drebedengi-python-api/ Free software: GPL-3.0-only","title":"Drebedengi Python API"},{"location":"#features","text":"Almost full coverage of \"get\" methods with better English naming for params & types (see drebedengi.api ) Important Retrieving aggregated reports via get_transactions is not currently supported, despite full list of API parameters Typed data model (see drebedengi.model )","title":"Features"},{"location":"#credits","text":"Thanks to: drebedengi for a great finance management service zeep for a convenient Python SOAP client lxml for XML library attrs for model classes This package was created with Cookiecutter and the mishamsk/cookiecutter-pypackage project template.","title":"Credits"},{"location":"changelog/","text":"Changelog \u00b6 All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning . [0.2.0] - 2022-11-12 \u00b6 Added \u00b6 Added timeout options to API class Changed \u00b6 Some under the hood changes for the repo (src layout, testing) [0.1.0] - 2022-08-20 \u00b6 Added \u00b6 Almost full coverage of \"get\" methods with better English naming for params & types Typed data model","title":"Changelog"},{"location":"changelog/#changelog","text":"All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning .","title":"Changelog"},{"location":"changelog/#020---2022-11-12","text":"","title":"[0.2.0] - 2022-11-12"},{"location":"changelog/#added","text":"Added timeout options to API class","title":"Added"},{"location":"changelog/#changed","text":"Some under the hood changes for the repo (src layout, testing)","title":"Changed"},{"location":"changelog/#010---2022-08-20","text":"","title":"[0.1.0] - 2022-08-20"},{"location":"changelog/#added_1","text":"Almost full coverage of \"get\" methods with better English naming for params & types Typed data model","title":"Added"},{"location":"contributing/","text":"Contributing \u00b6 Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways: Types of Contributions \u00b6 Report Bugs \u00b6 Report bugs at https://github.com/mishamsk/drebedengi-python-api/issues . If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug. Fix Bugs \u00b6 Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it. Implement Features \u00b6 Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it. Write Documentation \u00b6 Drebedengi Python API could always use more documentation, whether as part of the official Drebedengi Python API docs, in docstrings, or even on the web in blog posts, articles, and such. Submit Feedback \u00b6 The best way to send feedback is to file an issue at https://github.com/mishamsk/drebedengi-python-api/issues. If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :) Get Started! \u00b6 Ready to contribute? Here's how to set up drebedengi-python-api for local development. Fork the drebedengi-python-api repo on GitHub. Clone your fork locally $ git clone git@github.com:your_name_here/drebedengi-python-api.git Ensure poetry is installed. Install dependencies and start your virtualenv: $ poetry install Create a branch for local development: $ git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. When you're done making changes, check that your changes pass the tests, including testing other Python versions, with tox: $ poetry run tox Commit your changes and push your branch to GitHub: $ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push origin name-of-your-bugfix-or-feature Submit a pull request through the GitHub website. Pull Request Guidelines \u00b6 Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.md. The pull request should work for Python 3.10. Check https://github.com/mishamsk/drebedengi-python-api/actions and make sure that the tests pass for all supported Python versions. Tips \u00b6 $ poetry run pytest tests/test_drebedengi.py To run a subset of tests. Deploying \u00b6 A reminder for the maintainers on how to deploy. Make sure all your changes are committed (including an entry in CHANGELOG.md). Then run: $ poetry run bump2version patch # possible: major / minor / patch $ git push $ git push --tags GitHub Actions will then deploy to PyPI if tests pass.","title":"Contributing"},{"location":"contributing/#contributing","text":"Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways:","title":"Contributing"},{"location":"contributing/#types-of-contributions","text":"","title":"Types of Contributions"},{"location":"contributing/#report-bugs","text":"Report bugs at https://github.com/mishamsk/drebedengi-python-api/issues . If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug.","title":"Report Bugs"},{"location":"contributing/#fix-bugs","text":"Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it.","title":"Fix Bugs"},{"location":"contributing/#implement-features","text":"Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it.","title":"Implement Features"},{"location":"contributing/#write-documentation","text":"Drebedengi Python API could always use more documentation, whether as part of the official Drebedengi Python API docs, in docstrings, or even on the web in blog posts, articles, and such.","title":"Write Documentation"},{"location":"contributing/#submit-feedback","text":"The best way to send feedback is to file an issue at https://github.com/mishamsk/drebedengi-python-api/issues. If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :)","title":"Submit Feedback"},{"location":"contributing/#get-started","text":"Ready to contribute? Here's how to set up drebedengi-python-api for local development. Fork the drebedengi-python-api repo on GitHub. Clone your fork locally $ git clone git@github.com:your_name_here/drebedengi-python-api.git Ensure poetry is installed. Install dependencies and start your virtualenv: $ poetry install Create a branch for local development: $ git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. When you're done making changes, check that your changes pass the tests, including testing other Python versions, with tox: $ poetry run tox Commit your changes and push your branch to GitHub: $ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push origin name-of-your-bugfix-or-feature Submit a pull request through the GitHub website.","title":"Get Started!"},{"location":"contributing/#pull-request-guidelines","text":"Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.md. The pull request should work for Python 3.10. Check https://github.com/mishamsk/drebedengi-python-api/actions and make sure that the tests pass for all supported Python versions.","title":"Pull Request Guidelines"},{"location":"contributing/#tips","text":"$ poetry run pytest tests/test_drebedengi.py To run a subset of tests.","title":"Tips"},{"location":"contributing/#deploying","text":"A reminder for the maintainers on how to deploy. Make sure all your changes are committed (including an entry in CHANGELOG.md). Then run: $ poetry run bump2version patch # possible: major / minor / patch $ git push $ git push --tags GitHub Actions will then deploy to PyPI if tests pass.","title":"Deploying"},{"location":"installation/","text":"Installation \u00b6 Stable release \u00b6 To install Drebedengi Python API, run this command in your terminal: $ pip install drebedengi-python-api This is the preferred method to install Drebedengi Python API, as it will always install the most recent stable release. If you don't have pip installed, this Python installation guide can guide you through the process. From source \u00b6 The source for Drebedengi Python API can be downloaded from the Github repo . You can either clone the public repository: $ git clone git://github.com/mishamsk/drebedengi-python-api Once you have a copy of the source, you can install it with: $ pip install .","title":"Installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#stable-release","text":"To install Drebedengi Python API, run this command in your terminal: $ pip install drebedengi-python-api This is the preferred method to install Drebedengi Python API, as it will always install the most recent stable release. If you don't have pip installed, this Python installation guide can guide you through the process.","title":"Stable release"},{"location":"installation/#from-source","text":"The source for Drebedengi Python API can be downloaded from the Github repo . You can either clone the public repository: $ git clone git://github.com/mishamsk/drebedengi-python-api Once you have a copy of the source, you can install it with: $ pip install .","title":"From source"},{"location":"usage/","text":"Usage \u00b6 To use Drebedengi Python API in a project from drebedengi import DrebedengiAPI from drebedengi.model import TransactionType api = DrebedengiAPI ( api_key = api_key , login = login , password = password , ) print ( api . get_transactions ( include_types = TransactionType . TRANSFER )[ 0 ])","title":"Usage"},{"location":"usage/#usage","text":"To use Drebedengi Python API in a project from drebedengi import DrebedengiAPI from drebedengi.model import TransactionType api = DrebedengiAPI ( api_key = api_key , login = login , password = password , ) print ( api . get_transactions ( include_types = TransactionType . TRANSFER )[ 0 ])","title":"Usage"},{"location":"reference/SUMMARY/","text":"drebedengi api model utils","title":"SUMMARY"},{"location":"reference/drebedengi/","text":"Top-level package for Drebedengi Python API.","title":"Index"},{"location":"reference/drebedengi/api/","text":"DrebedengiAPI \u00b6 DrebedengiAPI ( api_key : str , login : str , password : str , * , strict : bool = True , soap_url : str = DREBEDENGI_DEFAULT_SOAP_URL , wsdl_timeout : float = DREBEDENGI_DEFAULT_TIMEOUTS [ 0 ], operation_timeout : float = DREBEDENGI_DEFAULT_TIMEOUTS [ 1 ] ) -> None Drebedengi API Wrapper class. Parameters: Name Type Description Default api_key str api_key (get from drebedengi via support) required login str your login required password str your password required strict bool strict mode - API calls will fail if the returned data doesn't match the model. Defaults to True. True soap_url str Optional alternative SOAP URL. Defaults to DREBEDENGI_DEFAULT_SOAP_URL. DREBEDENGI_DEFAULT_SOAP_URL wsdl_timeout float WSDL download timeout. Defaults to 60s. DREBEDENGI_DEFAULT_TIMEOUTS[0] operation_timeout float Operation timeout. Defaults to 300s. DREBEDENGI_DEFAULT_TIMEOUTS[1] get_accounts \u00b6 get_accounts ( * , id_list : List [ int ] | None = None ) -> List [ Account ] Implements getPlaceList API Original wsdl description Retrievs place list (array of arrays): [id] => Internal place ID; [budget_family_id] => User family ID (for multiuser mode); [type] => Type of object, 4 - places; [name] => Place name given by user; [is_hidden] => is place hidden in user interface; [is_autohide] => debts will auto hide on null balance; [is_for_duty] => Internal place for duty logic, Auto created while user adds \"Waste or income duty\"; [sort] => User sort of place list; [purse_of_nuid] => Not empty if place is purse of user# The value is internal user ID; [icon_id] => Place icon ID from http://www(dot)drebedengi(dot)ru/img/pl icon_id gif; If parameter [idList] is given, it will be treat as ID list of objects to retrieve# this is used for synchronization; There is may be empty response, if user access level is limited; get_changes \u00b6 get_changes ( * , revision : int ) -> List [ ChangeRecord ] Implements getChangeList API Original wsdl description Get all changes (array of arrays) from server relative to given revision: [revision] => the revision of the change, [action_id] => the action of the change '1' - add, '2' - update, '3' - delete'; [object_type_id] => type of the object changed '1' - any record (transction), '2' - income source, '3' - waste category, '4' - place, '5' - currency, '6' - budget_tags, '7' - budget_accum, '8' - budget_accum_order; [object_id] => ID of the object for subsequent calls getRecordList, getCategoryList etc; [date] => the date of the change; Parameter [revision] => int8 number, usually saved on the client from last successfull sync. get_currencies \u00b6 get_currencies ( * , id_list : List [ int ] | None = None ) -> List [ Currency ] Implements getCurrencyList API Original wsdl description Retrievs currency list (array of arrays) with codes and courses: [id] => Internal currency ID; [name] => Currency name, given by user; [course] => current course from sbrf(dot)ru; [code] => International currency code (for course autoupdating); [family_id] => User family ID (for multiuser mode); [is_default] => is default currency# There should be only one default currency; [is_autoupdate] => autoupdate course once per day, from sbrf(dot)ru; [is_hidden] => is currency hidden in user interface; If parameter [idList] is given, it will be treat as ID list of objects to retrieve# this is used for synchronization; get_current_revision \u00b6 get_current_revision () -> int Implements getCurrentRevision API Original wsdl description Get current server revision number. get_expense_categories \u00b6 get_expense_categories ( * , id_list : List [ int ] | None = None ) -> List [ ExpenseCategory ] Implements getCategoryList API Original wsdl description Retrievs waste category list (array of arrays): [id] => Internal category ID; [parent_id] => For tree structure; [budget_family_id] => User family ID (for multiuser mode); [type] => Type of object, 3 - waste category; [name] => Category name given by user; [is_hidden] => is category hidden in user interface; [sort] => User sort of category tree; If parameter [idList] is given, it will be treat as ID list of objects to retrieve# this is used for synchronization; get_income_sources \u00b6 get_income_sources ( * , id_list : List [ int ] | None = None ) -> List [ IncomeSource ] Implements getSourceList API Original wsdl description Retrievs income source list (array of arrays): [id] => Internal source ID; [parent_id] => For tree structure; [budget_family_id] => User family ID (for multiuser mode); [type] => Type of object, 2 - income source; [name] => Source name given by user; [is_hidden] => is income hidden in user interface; [sort] => User sort of source tree; If parameter [idList] is given, it will be treat as ID list of objects to retrieve# this is used for synchronization; get_tags \u00b6 get_tags ( * , id_list : List [ int ] | None = None ) -> List [ Tag ] Implements getTagList API Original wsdl description Retrievs tag list (array of arrays): [id] => Internal tag ID; [family_id] => User family ID (for multiuser mode); [name] => Tag name given by user; [is_hidden] => is tag hidden in user interface; [is_family] => is tag visible for all family user, or user only; [sort] => User sort of tag list; [parent_id] => For tree view; If parameter [idList] is given, it will be treat as ID list of objects to retrieve# this is used for synchronization; get_transactions \u00b6 get_transactions ( * , relative_date : datetime | None = None , period_from : datetime | None = None , period_to : datetime | None = None , account_filter : ReportFilterType = ReportFilterType . NONE , account_filter_ids : List [ int ] | None = None , tag_filter : ReportFilterType = ReportFilterType . NONE , tag_filter_ids : List [ int ] | None = None , category_filter : ReportFilterType = ReportFilterType . NONE , category_filter_ids : List [ int ] | None = None , include_types : TransactionType = TransactionType . ANY , convert_to_currency_id : int = 0 , aggregated : bool = False , group_by : ReportGrouping = ReportGrouping . NONE , report_period : ReportPeriod = ReportPeriod . LAST_20_RECORD , id_list : List [ int ] | None = None ) -> List [ Transaction ] Implements getRecordList API Original wsdl description Retrievs record list (array of arrays) or report table by parameters; [params] => array of following parameters: 'is_report' [true|false (no default)] - retrievs data for report only or full records (waste, incomes, moves, changes) for export; 'relative_date' [YYYY-MM-DD (NOW by default)] - all data will be retrieved relative to this value, according to 'r_period' value; 'period_to', 'period_from' [YYYY-MM-DD] - custom period, if 'r_period' = 0; 'is_show_duty' [true(default)|false] - whether or not include duty record; 'r_period' [custom period = 0, this month = 1, today = 7, last month = 2, this quart = 3, this year = 4, last year = 5, all time = 6, last 20 record = 8 (default)] - period for which data will be obtained; 'r_what' [income = 2, waste = 3 (default), move = 4, change = 5, all types = 6] - type of data you want to get; 'r_who' [0 (default) - all users, int8 = user ID] - The data of the user to obtain, in the case of multiplayer mode; 'r_how' [show record list by detail = 1 (default), group incomes by source = 2, group wastes by category = 3] - Values 2 and 3 are for 'report' mode only# How to group the result record list; 'r_middle' [No average = 0 (default), Average monthly = 2592000, Average weekly = 604800, Averaged over days = 86400] - How to average the data, if r_how = 2 or 3; 'r_currency' [Original currency = 0 (default), int8 = currency ID] - Convert or not in to given currency; 'r_is_place', 'r_is_tag', 'r_is_category' [Include all = 0 (default), Include only selected = 1, All except selected = 2] - Exclude or include 'r_place', 'r_tag' or 'r_category' respectively; 'r_place', 'r_tag', 'r_category' [Array] - Array of numeric values for place ID, tag ID or category ID respectively; If parameter [idList] is given, it will be treat as ID list of objects to retrieve# this is used for synchronization; DrebedengiAPIError \u00b6 DrebedengiAPIError ( message : str , status_code : int , response_text : str , fault_code : str | None = None , ) -> None Bases: Exception Drebedengi API error class. check_and_raise classmethod \u00b6 check_and_raise ( response : Response ) -> None Check if response is an API error and immediatelly raise it.","title":"api"},{"location":"reference/drebedengi/api/#drebedengi.api.DrebedengiAPI","text":"DrebedengiAPI ( api_key : str , login : str , password : str , * , strict : bool = True , soap_url : str = DREBEDENGI_DEFAULT_SOAP_URL , wsdl_timeout : float = DREBEDENGI_DEFAULT_TIMEOUTS [ 0 ], operation_timeout : float = DREBEDENGI_DEFAULT_TIMEOUTS [ 1 ] ) -> None Drebedengi API Wrapper class. Parameters: Name Type Description Default api_key str api_key (get from drebedengi via support) required login str your login required password str your password required strict bool strict mode - API calls will fail if the returned data doesn't match the model. Defaults to True. True soap_url str Optional alternative SOAP URL. Defaults to DREBEDENGI_DEFAULT_SOAP_URL. DREBEDENGI_DEFAULT_SOAP_URL wsdl_timeout float WSDL download timeout. Defaults to 60s. DREBEDENGI_DEFAULT_TIMEOUTS[0] operation_timeout float Operation timeout. Defaults to 300s. DREBEDENGI_DEFAULT_TIMEOUTS[1]","title":"DrebedengiAPI"},{"location":"reference/drebedengi/api/#drebedengi.api.DrebedengiAPI.get_accounts","text":"get_accounts ( * , id_list : List [ int ] | None = None ) -> List [ Account ] Implements getPlaceList API Original wsdl description Retrievs place list (array of arrays): [id] => Internal place ID; [budget_family_id] => User family ID (for multiuser mode); [type] => Type of object, 4 - places; [name] => Place name given by user; [is_hidden] => is place hidden in user interface; [is_autohide] => debts will auto hide on null balance; [is_for_duty] => Internal place for duty logic, Auto created while user adds \"Waste or income duty\"; [sort] => User sort of place list; [purse_of_nuid] => Not empty if place is purse of user# The value is internal user ID; [icon_id] => Place icon ID from http://www(dot)drebedengi(dot)ru/img/pl icon_id gif; If parameter [idList] is given, it will be treat as ID list of objects to retrieve# this is used for synchronization; There is may be empty response, if user access level is limited;","title":"get_accounts()"},{"location":"reference/drebedengi/api/#drebedengi.api.DrebedengiAPI.get_changes","text":"get_changes ( * , revision : int ) -> List [ ChangeRecord ] Implements getChangeList API Original wsdl description Get all changes (array of arrays) from server relative to given revision: [revision] => the revision of the change, [action_id] => the action of the change '1' - add, '2' - update, '3' - delete'; [object_type_id] => type of the object changed '1' - any record (transction), '2' - income source, '3' - waste category, '4' - place, '5' - currency, '6' - budget_tags, '7' - budget_accum, '8' - budget_accum_order; [object_id] => ID of the object for subsequent calls getRecordList, getCategoryList etc; [date] => the date of the change; Parameter [revision] => int8 number, usually saved on the client from last successfull sync.","title":"get_changes()"},{"location":"reference/drebedengi/api/#drebedengi.api.DrebedengiAPI.get_currencies","text":"get_currencies ( * , id_list : List [ int ] | None = None ) -> List [ Currency ] Implements getCurrencyList API Original wsdl description Retrievs currency list (array of arrays) with codes and courses: [id] => Internal currency ID; [name] => Currency name, given by user; [course] => current course from sbrf(dot)ru; [code] => International currency code (for course autoupdating); [family_id] => User family ID (for multiuser mode); [is_default] => is default currency# There should be only one default currency; [is_autoupdate] => autoupdate course once per day, from sbrf(dot)ru; [is_hidden] => is currency hidden in user interface; If parameter [idList] is given, it will be treat as ID list of objects to retrieve# this is used for synchronization;","title":"get_currencies()"},{"location":"reference/drebedengi/api/#drebedengi.api.DrebedengiAPI.get_current_revision","text":"get_current_revision () -> int Implements getCurrentRevision API Original wsdl description Get current server revision number.","title":"get_current_revision()"},{"location":"reference/drebedengi/api/#drebedengi.api.DrebedengiAPI.get_expense_categories","text":"get_expense_categories ( * , id_list : List [ int ] | None = None ) -> List [ ExpenseCategory ] Implements getCategoryList API Original wsdl description Retrievs waste category list (array of arrays): [id] => Internal category ID; [parent_id] => For tree structure; [budget_family_id] => User family ID (for multiuser mode); [type] => Type of object, 3 - waste category; [name] => Category name given by user; [is_hidden] => is category hidden in user interface; [sort] => User sort of category tree; If parameter [idList] is given, it will be treat as ID list of objects to retrieve# this is used for synchronization;","title":"get_expense_categories()"},{"location":"reference/drebedengi/api/#drebedengi.api.DrebedengiAPI.get_income_sources","text":"get_income_sources ( * , id_list : List [ int ] | None = None ) -> List [ IncomeSource ] Implements getSourceList API Original wsdl description Retrievs income source list (array of arrays): [id] => Internal source ID; [parent_id] => For tree structure; [budget_family_id] => User family ID (for multiuser mode); [type] => Type of object, 2 - income source; [name] => Source name given by user; [is_hidden] => is income hidden in user interface; [sort] => User sort of source tree; If parameter [idList] is given, it will be treat as ID list of objects to retrieve# this is used for synchronization;","title":"get_income_sources()"},{"location":"reference/drebedengi/api/#drebedengi.api.DrebedengiAPI.get_tags","text":"get_tags ( * , id_list : List [ int ] | None = None ) -> List [ Tag ] Implements getTagList API Original wsdl description Retrievs tag list (array of arrays): [id] => Internal tag ID; [family_id] => User family ID (for multiuser mode); [name] => Tag name given by user; [is_hidden] => is tag hidden in user interface; [is_family] => is tag visible for all family user, or user only; [sort] => User sort of tag list; [parent_id] => For tree view; If parameter [idList] is given, it will be treat as ID list of objects to retrieve# this is used for synchronization;","title":"get_tags()"},{"location":"reference/drebedengi/api/#drebedengi.api.DrebedengiAPI.get_transactions","text":"get_transactions ( * , relative_date : datetime | None = None , period_from : datetime | None = None , period_to : datetime | None = None , account_filter : ReportFilterType = ReportFilterType . NONE , account_filter_ids : List [ int ] | None = None , tag_filter : ReportFilterType = ReportFilterType . NONE , tag_filter_ids : List [ int ] | None = None , category_filter : ReportFilterType = ReportFilterType . NONE , category_filter_ids : List [ int ] | None = None , include_types : TransactionType = TransactionType . ANY , convert_to_currency_id : int = 0 , aggregated : bool = False , group_by : ReportGrouping = ReportGrouping . NONE , report_period : ReportPeriod = ReportPeriod . LAST_20_RECORD , id_list : List [ int ] | None = None ) -> List [ Transaction ] Implements getRecordList API Original wsdl description Retrievs record list (array of arrays) or report table by parameters; [params] => array of following parameters: 'is_report' [true|false (no default)] - retrievs data for report only or full records (waste, incomes, moves, changes) for export; 'relative_date' [YYYY-MM-DD (NOW by default)] - all data will be retrieved relative to this value, according to 'r_period' value; 'period_to', 'period_from' [YYYY-MM-DD] - custom period, if 'r_period' = 0; 'is_show_duty' [true(default)|false] - whether or not include duty record; 'r_period' [custom period = 0, this month = 1, today = 7, last month = 2, this quart = 3, this year = 4, last year = 5, all time = 6, last 20 record = 8 (default)] - period for which data will be obtained; 'r_what' [income = 2, waste = 3 (default), move = 4, change = 5, all types = 6] - type of data you want to get; 'r_who' [0 (default) - all users, int8 = user ID] - The data of the user to obtain, in the case of multiplayer mode; 'r_how' [show record list by detail = 1 (default), group incomes by source = 2, group wastes by category = 3] - Values 2 and 3 are for 'report' mode only# How to group the result record list; 'r_middle' [No average = 0 (default), Average monthly = 2592000, Average weekly = 604800, Averaged over days = 86400] - How to average the data, if r_how = 2 or 3; 'r_currency' [Original currency = 0 (default), int8 = currency ID] - Convert or not in to given currency; 'r_is_place', 'r_is_tag', 'r_is_category' [Include all = 0 (default), Include only selected = 1, All except selected = 2] - Exclude or include 'r_place', 'r_tag' or 'r_category' respectively; 'r_place', 'r_tag', 'r_category' [Array] - Array of numeric values for place ID, tag ID or category ID respectively; If parameter [idList] is given, it will be treat as ID list of objects to retrieve# this is used for synchronization;","title":"get_transactions()"},{"location":"reference/drebedengi/api/#drebedengi.api.DrebedengiAPIError","text":"DrebedengiAPIError ( message : str , status_code : int , response_text : str , fault_code : str | None = None , ) -> None Bases: Exception Drebedengi API error class.","title":"DrebedengiAPIError"},{"location":"reference/drebedengi/api/#drebedengi.api.DrebedengiAPIError.check_and_raise","text":"check_and_raise ( response : Response ) -> None Check if response is an API error and immediatelly raise it.","title":"check_and_raise()"},{"location":"reference/drebedengi/model/","text":"Drebedengi data model & API dictionaries module Account \u00b6 Drebedengi account model. Attributes: Name Type Description id int id is a unique identifier for the account. budget_family_id int User family ID (for multiuser mode) object_type ObjectType Always ObjectType.ACCOUNT name str Account name assigned by the user. is_hidden bool True if the account is hidden. is_autohide bool True if the account is configured to hide on zero balance. is_loan bool True if the account is for loans (both taken and given). sort int Sort order of the account. wallet_user_id int | None User Id if account is marked as a personal wallet. icon_id str | None Account Icon Id. ActionType \u00b6 Bases: IntEnum Enum of possible change action types. Used in ChangeRecord model. Attributes: Name Type Description CREATE int 1 UPDATE int 2 DELETE int 3 ChangeRecord \u00b6 Drebedengi change record model. Attributes: Name Type Description revision_id int Revision id. action_type ActionType Action type (update, create, delete). change_object_type ObjectType changed object type. object_id int changed object type id. date datetime change date in user set timezone. Currency \u00b6 Drebedengi currency model. Attributes: Name Type Description id int id is a unique drebedengi internal identifier for the currency. user_name str A custom currency name assigned by the user. currency_code str International 3-leet currency code. exchange_rate float Current exchange rate from the default currency to the currency. budget_family_id int User family ID (for multiuser mode) is_default bool True if the currency is set as default. is_autoupdate bool True if the currency is configured to fecth exchange rate automatically. is_hidden bool True if the currency is hidden. ExpenseCategory \u00b6 Drebedengi expense category model. Attributes: Name Type Description id int id is a unique identifier for the expense category. parent_id int parent_id is the id of the parent expense category. If the expense category has no parent, parent_id is -1. budget_family_id int User family ID (for multiuser mode) object_type ObjectType Always ObjectType.EXPENSE_CATEGORY name str Name of the expense category. is_hidden bool True if the expense category is hidden. sort int Sort order of the expense category. IncomeSource \u00b6 Drebedengi income source model. Attributes: Name Type Description id int id is a unique identifier for the income source. parent_id int parent_id is the id of the parent income source. If the income source has no parent, parent_id is -1. budget_family_id int User family ID (for multiuser mode) object_type ObjectType Always ObjectType.INCOME_SOURCE name str Name of the income source. is_hidden bool True if the income source is hidden. sort int Sort order of the income source. ObjectType \u00b6 Bases: IntEnum Enum of possible object types. Used in ChangeRecord and other models. Attributes: Name Type Description TRANSACTION int 1 INCOME_SOURCE int 2 EXPENSE_CATEGORY int 3 ACCOUNT int 4 CURRENCY int 5 BUDGET_TAGS int 6 BUDGET_ACCUM int 7 BUDGET_ACCUM_ORDER int 8 ReportFilterType \u00b6 Bases: IntEnum Report filter type enum. Used in get_transactions API to configure categories, tags and other filters. Attributes: Name Type Description NONE int 0 SELECTED_ONLY int 1 EXCEPT_SELECTED int 2 ReportGrouping \u00b6 Bases: IntEnum Report grouping enum. Used in get_transactions API to configure aggregated report. Attributes: Name Type Description NONE int 1 BY_INCOME_SOURCE int 2 BY_EXPENSE_CATEGORY int 3 ReportPeriod \u00b6 Bases: IntEnum Report period enum. Used in get_transactions API to filter by date. Attributes: Name Type Description CUSTOM_PERIOD int 0 THIS_MONTH int 1 TODAY int 7 LAST_MONTH int 2 THIS_QUART int 3 THIS_YEAR int 4 LAST_YEAR int 5 ALL_TIME int 6 LAST_20_RECORD int 8 Tag \u00b6 Drebedengi tag model. Attributes: Name Type Description id int id is a unique identifier for the tag. parent_id int parent_id is the id of the parent tag. If the tag has no parent, parent_id is -1. budget_family_id int User family ID (for multiuser mode) name str Name of the tag. is_hidden bool True if the tag is hidden. is_shared bool True if the tag is shared across family account, otherwise it's user only. sort int Sort order of the tag. Transaction \u00b6 Drebedengi transaction (aka Record) model. Attributes: Name Type Description id int transaction id budget_object_id int (int) For expenses - expense category; for incomes - income source; for transfers - source account_id, for exchanges - equal to account_id. user_nuid int (int) User id. budget_family_id int (int) Family id for multi-user mode. is_loan_transfer bool (bool) = Makrs trabsfer transactions that went to a \"loan\" account. operation_date datetime (datetime) Operation date in user set timezone. currency_id int (int) Transaction currency id. operation_type TransactionType (TransactionType) Transaction type. account_id int (int) Account id. amount int (int) Transaction amount in the original currency multiplied by 100 comment str | None (str | None) Transaction comment. May be empty oper_utc_timestamp datetime System timestamp, no official documentation. group_id int Group id if this transaction is part of a group. TransactionType \u00b6 Bases: IntEnum Enum of possible transaction types. Attributes: Name Type Description INCOME int 2 EXPENSE int 3 TRANSFER int 4 EXCHANGE int 5 ANY int 6","title":"model"},{"location":"reference/drebedengi/model/#drebedengi.model.Account","text":"Drebedengi account model. Attributes: Name Type Description id int id is a unique identifier for the account. budget_family_id int User family ID (for multiuser mode) object_type ObjectType Always ObjectType.ACCOUNT name str Account name assigned by the user. is_hidden bool True if the account is hidden. is_autohide bool True if the account is configured to hide on zero balance. is_loan bool True if the account is for loans (both taken and given). sort int Sort order of the account. wallet_user_id int | None User Id if account is marked as a personal wallet. icon_id str | None Account Icon Id.","title":"Account"},{"location":"reference/drebedengi/model/#drebedengi.model.ActionType","text":"Bases: IntEnum Enum of possible change action types. Used in ChangeRecord model. Attributes: Name Type Description CREATE int 1 UPDATE int 2 DELETE int 3","title":"ActionType"},{"location":"reference/drebedengi/model/#drebedengi.model.ChangeRecord","text":"Drebedengi change record model. Attributes: Name Type Description revision_id int Revision id. action_type ActionType Action type (update, create, delete). change_object_type ObjectType changed object type. object_id int changed object type id. date datetime change date in user set timezone.","title":"ChangeRecord"},{"location":"reference/drebedengi/model/#drebedengi.model.Currency","text":"Drebedengi currency model. Attributes: Name Type Description id int id is a unique drebedengi internal identifier for the currency. user_name str A custom currency name assigned by the user. currency_code str International 3-leet currency code. exchange_rate float Current exchange rate from the default currency to the currency. budget_family_id int User family ID (for multiuser mode) is_default bool True if the currency is set as default. is_autoupdate bool True if the currency is configured to fecth exchange rate automatically. is_hidden bool True if the currency is hidden.","title":"Currency"},{"location":"reference/drebedengi/model/#drebedengi.model.ExpenseCategory","text":"Drebedengi expense category model. Attributes: Name Type Description id int id is a unique identifier for the expense category. parent_id int parent_id is the id of the parent expense category. If the expense category has no parent, parent_id is -1. budget_family_id int User family ID (for multiuser mode) object_type ObjectType Always ObjectType.EXPENSE_CATEGORY name str Name of the expense category. is_hidden bool True if the expense category is hidden. sort int Sort order of the expense category.","title":"ExpenseCategory"},{"location":"reference/drebedengi/model/#drebedengi.model.IncomeSource","text":"Drebedengi income source model. Attributes: Name Type Description id int id is a unique identifier for the income source. parent_id int parent_id is the id of the parent income source. If the income source has no parent, parent_id is -1. budget_family_id int User family ID (for multiuser mode) object_type ObjectType Always ObjectType.INCOME_SOURCE name str Name of the income source. is_hidden bool True if the income source is hidden. sort int Sort order of the income source.","title":"IncomeSource"},{"location":"reference/drebedengi/model/#drebedengi.model.ObjectType","text":"Bases: IntEnum Enum of possible object types. Used in ChangeRecord and other models. Attributes: Name Type Description TRANSACTION int 1 INCOME_SOURCE int 2 EXPENSE_CATEGORY int 3 ACCOUNT int 4 CURRENCY int 5 BUDGET_TAGS int 6 BUDGET_ACCUM int 7 BUDGET_ACCUM_ORDER int 8","title":"ObjectType"},{"location":"reference/drebedengi/model/#drebedengi.model.ReportFilterType","text":"Bases: IntEnum Report filter type enum. Used in get_transactions API to configure categories, tags and other filters. Attributes: Name Type Description NONE int 0 SELECTED_ONLY int 1 EXCEPT_SELECTED int 2","title":"ReportFilterType"},{"location":"reference/drebedengi/model/#drebedengi.model.ReportGrouping","text":"Bases: IntEnum Report grouping enum. Used in get_transactions API to configure aggregated report. Attributes: Name Type Description NONE int 1 BY_INCOME_SOURCE int 2 BY_EXPENSE_CATEGORY int 3","title":"ReportGrouping"},{"location":"reference/drebedengi/model/#drebedengi.model.ReportPeriod","text":"Bases: IntEnum Report period enum. Used in get_transactions API to filter by date. Attributes: Name Type Description CUSTOM_PERIOD int 0 THIS_MONTH int 1 TODAY int 7 LAST_MONTH int 2 THIS_QUART int 3 THIS_YEAR int 4 LAST_YEAR int 5 ALL_TIME int 6 LAST_20_RECORD int 8","title":"ReportPeriod"},{"location":"reference/drebedengi/model/#drebedengi.model.Tag","text":"Drebedengi tag model. Attributes: Name Type Description id int id is a unique identifier for the tag. parent_id int parent_id is the id of the parent tag. If the tag has no parent, parent_id is -1. budget_family_id int User family ID (for multiuser mode) name str Name of the tag. is_hidden bool True if the tag is hidden. is_shared bool True if the tag is shared across family account, otherwise it's user only. sort int Sort order of the tag.","title":"Tag"},{"location":"reference/drebedengi/model/#drebedengi.model.Transaction","text":"Drebedengi transaction (aka Record) model. Attributes: Name Type Description id int transaction id budget_object_id int (int) For expenses - expense category; for incomes - income source; for transfers - source account_id, for exchanges - equal to account_id. user_nuid int (int) User id. budget_family_id int (int) Family id for multi-user mode. is_loan_transfer bool (bool) = Makrs trabsfer transactions that went to a \"loan\" account. operation_date datetime (datetime) Operation date in user set timezone. currency_id int (int) Transaction currency id. operation_type TransactionType (TransactionType) Transaction type. account_id int (int) Account id. amount int (int) Transaction amount in the original currency multiplied by 100 comment str | None (str | None) Transaction comment. May be empty oper_utc_timestamp datetime System timestamp, no official documentation. group_id int Group id if this transaction is part of a group.","title":"Transaction"},{"location":"reference/drebedengi/model/#drebedengi.model.TransactionType","text":"Bases: IntEnum Enum of possible transaction types. Attributes: Name Type Description INCOME int 2 EXPENSE int 3 TRANSFER int 4 EXCHANGE int 5 ANY int 6","title":"TransactionType"},{"location":"reference/drebedengi/utils/","text":"Supporting utilities for working with XML & SOAP generate_xml_array \u00b6 generate_xml_array ( values : List [ Any ]) -> xsd . ComplexType Generates a SOAP Array from a list of values. Parameters: Name Type Description Default values List [ Any ] a list of values to be converted to an XML SOAP Encoded Array. required Returns: Type Description xsd . ComplexType xsd.ComplexType: zeep XML ComplexType representing an XML SOAP Encoded Array. xmlmap_to_model \u00b6 xmlmap_to_model ( xmlmap : etree . Element , model_type : Type [ T ], * , strict : bool = True ) -> T Converts XML ns2:Map to a model of type model_type . Parameters: Name Type Description Default xmlmap etree . Element xml subtree (ns2:Map) representing a model required model_type Type [ T ] model type to map data into required strict bool fail if the returned data doesn't match the model. Defaults to True. True Raises: Type Description ValueError if strict is True and the returned data doesn't match the model. ValueError if the model_type is not an attrs-based model. Returns: Name Type Description T T generated model instance","title":"utils"},{"location":"reference/drebedengi/utils/#drebedengi.utils.generate_xml_array","text":"generate_xml_array ( values : List [ Any ]) -> xsd . ComplexType Generates a SOAP Array from a list of values. Parameters: Name Type Description Default values List [ Any ] a list of values to be converted to an XML SOAP Encoded Array. required Returns: Type Description xsd . ComplexType xsd.ComplexType: zeep XML ComplexType representing an XML SOAP Encoded Array.","title":"generate_xml_array()"},{"location":"reference/drebedengi/utils/#drebedengi.utils.xmlmap_to_model","text":"xmlmap_to_model ( xmlmap : etree . Element , model_type : Type [ T ], * , strict : bool = True ) -> T Converts XML ns2:Map to a model of type model_type . Parameters: Name Type Description Default xmlmap etree . Element xml subtree (ns2:Map) representing a model required model_type Type [ T ] model type to map data into required strict bool fail if the returned data doesn't match the model. Defaults to True. True Raises: Type Description ValueError if strict is True and the returned data doesn't match the model. ValueError if the model_type is not an attrs-based model. Returns: Name Type Description T T generated model instance","title":"xmlmap_to_model()"}]}